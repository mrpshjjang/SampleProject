/*
* Copyright (c) Sample.
*/

using System.IO;
using System.Text;

namespace Sample.SpecData.Editor.Generator
{
    internal abstract class GeneratorCS
    {
        private const int indentSpaces = 4;

        private const string Comment =
@"// <auto-generated>
// SpecDataGenerator에서 만들어진 파일입니다. 수정하지 마세요.
// </auto-generated>";

        private readonly StringBuilder _builder;

        protected int Indent { get; set; }

        protected GeneratorCS(bool comment = true)
        {
            _builder = new StringBuilder();
            if (comment)
            {
                WriteLine(Comment);
            }
            WriteNewLine();
        }

        protected void WriteLine(string code)
        {
            string c = new string(' ', Indent * indentSpaces) + code;
            _builder.AppendLine(c);
        }

        protected void WriteNamespace(string ns)
        {
            if (string.IsNullOrEmpty(ns))
                return;

            WriteLine($"namespace {ns}");
            IndentOpen();
        }

        protected void WriteNamespaceValid(string ns)
        {
            if (string.IsNullOrEmpty(ns))
                return;

            WriteLine($"namespace {ns}.Valid");
            IndentOpen();
        }

        protected void WriteUsing(string us)
        {
            WriteLine($"using {us};");
        }

        protected void WriteClass(string className, bool isPartial, bool isStatic)
        {
            string partial = isPartial ? " partial" : string.Empty;
            string @static = isStatic ? " static" : string.Empty;
            WriteLine($"public{@static}{partial} class {className}");
            IndentOpen();
        }

        protected void WriteNewLine()
        {
            _builder.AppendLine(string.Empty);
        }

        protected void AutoClose()
        {
            while (Indent > 0)
            {
                Indent--;
                WriteLine("}");
            }
        }

        protected void IndentOpen()
        {
            WriteLine("{");
            Indent++;
        }

        protected void IndentClose()
        {
            if (Indent <= 0)
            {
                return;
            }

            Indent--;
            WriteLine("}");
        }

        public override string ToString() => _builder.ToString();

        protected void Save(string folder, string filename)
        {
            if (!Directory.Exists(folder))
            {
                Directory.CreateDirectory(folder);
            }

            string code = ToString().Replace("\r\n", "\r").
                Replace("\n\r", "\r").
                Replace("\n", "\r").
                Replace("\r", "\r\n");

            string path = Path.Combine(folder, $"{filename}.cs");
            File.WriteAllText(path, code);
        }

        protected bool Exist(string folder, string filename)
        {
            if (!Directory.Exists(folder))
            {
                return false;
            }

            string path = Path.Combine(folder, $"{filename}.cs");
            return File.Exists(path);
        }
    }
}
